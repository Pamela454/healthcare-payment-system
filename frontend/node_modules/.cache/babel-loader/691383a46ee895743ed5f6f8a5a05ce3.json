{"ast":null,"code":"//action creators\nimport * as Cookies from \"js-cookie\";\nexport const setCurrentAccount = account => {\n  console.log(account);\n  return {\n    type: \"SET_CURRENT_ACCOUNT\",\n    //should this be add account?\n    payload: account\n  };\n};\nexport const logout = () => {\n  return {\n    type: \"CLEAR_CURRENT_ACCOUNT\"\n  };\n};\nexport const fetchedAccounts = accounts => {\n  console.log(accounts);\n  return {\n    type: \"SET_ACCOUNT_LIST\",\n    payload: accounts\n  };\n}; //type and payload property\n//action creator, function that returns an action\n//thunk allows return of function instead of object. Function receives dispatch function and can dispatch multiple actions.\n//needs to be revised\n\nexport const getAccount = (data, history) => {\n  //a thunk\n  return dispatch => {\n    console.log(data.relationships.account.data.id);\n    return fetch(`http://localhost:3001/api/v1/accounts/${data.relationships.account.data.id}`, {\n      method: \"GET\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify()\n    }).then(res => res.json()).then(account => {\n      if (account.error) {\n        console.log(account);\n        alert(\"error\");\n      } else {\n        console.log(account.data.id);\n        localStorage.setItem(\"loggedIn\", true); //can only set string, JSON.stringify to convert\n\n        dispatch(setCurrentAccount(account.data));\n        history.push(`/accounts/${account.data.id}`);\n      }\n    }).catch(console.log);\n  };\n};\nexport const getAllAccounts = () => {\n  console.log(\"hello\");\n  return dispatch => {\n    return fetch(\"http://localhost:3001/api/v1/accounts\", {\n      method: \"GET\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify()\n    }).then(res => res.json()).then(accounts => {\n      if (accounts.error) {\n        console.log(accounts);\n        alert(\"error\");\n      } else {\n        console.log(accounts.data);\n        dispatch(fetchedAccounts(accounts.data));\n      }\n    }).catch(console.log);\n  };\n};\nexport const login = (form, history) => {\n  let token = Cookies.get(\"\");\n  return dispatch => {\n    return fetch(\"http://localhost:3001/api/v1/login\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(form)\n    }).then(res => res.json()).then(account => {\n      console.log(account);\n\n      if (account.error || account === null || account === undefined) {\n        console.log(\"no\");\n      } else {\n        console.log(\"yes\");\n        console.log(account.data);\n        localStorage.setItem(\"loggedIn\", true);\n        dispatch(setCurrentAccount(account.data));\n        history.push(`/accounts/${account.data.id}`);\n      }\n    }).catch(console.log);\n  };\n}; //should we be using async/await?\n\nexport const signup = (form, history) => {\n  return dispatch => {\n    console.log(\"form is: \");\n    console.log(form);\n    return fetch(\"http://localhost:3001/api/v1/signup\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(form)\n    }).then(res => res.json()) //parse JSON\n    .then(account => {\n      console.log(account);\n      console.log(history);\n\n      if (account.error) {\n        console.log(\"no\");\n      } else {\n        localStorage.setItem(\"loggedIn\", true);\n        console.log(account.data);\n        dispatch(setCurrentAccount(account.data));\n        history.push(`/accounts/${account.data.id}`);\n      }\n    }).catch(console.log);\n  };\n};","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/actions/currentAccount.js"],"names":["Cookies","setCurrentAccount","account","console","log","type","payload","logout","fetchedAccounts","accounts","getAccount","data","history","dispatch","relationships","id","fetch","method","credentials","headers","body","JSON","stringify","then","res","json","error","alert","localStorage","setItem","push","catch","getAllAccounts","login","form","token","get","Accept","Authorization","undefined","signup"],"mappings":"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","sourcesContent":["//action creators\nimport * as Cookies from \"js-cookie\";\n\nexport const setCurrentAccount = (account) => {\n  console.log(account);\n  return {\n    type: \"SET_CURRENT_ACCOUNT\", //should this be add account?\n    payload: account,\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: \"CLEAR_CURRENT_ACCOUNT\",\n  };\n};\n\nexport const fetchedAccounts = (accounts) => {\n  console.log(accounts);\n  return {\n    type: \"SET_ACCOUNT_LIST\",\n    payload: accounts,\n  };\n};\n\n//type and payload property\n//action creator, function that returns an action\n//thunk allows return of function instead of object. Function receives dispatch function and can dispatch multiple actions.\n//needs to be revised\nexport const getAccount = (data, history) => {\n  //a thunk\n  return (dispatch) => {\n    console.log(data.relationships.account.data.id);\n    return fetch(\n      `http://localhost:3001/api/v1/accounts/${data.relationships.account.data.id}`,\n      {\n        method: \"GET\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(),\n      }\n    )\n      .then((res) => res.json())\n      .then((account) => {\n        if (account.error) {\n          console.log(account);\n          alert(\"error\");\n        } else {\n          console.log(account.data.id);\n          localStorage.setItem(\"loggedIn\", true); //can only set string, JSON.stringify to convert\n          dispatch(setCurrentAccount(account.data));\n          history.push(`/accounts/${account.data.id}`);\n        }\n      })\n      .catch(console.log);\n  };\n};\n\nexport const getAllAccounts = () => {\n  console.log(\"hello\");\n  return (dispatch) => {\n    return fetch(\"http://localhost:3001/api/v1/accounts\", {\n      method: \"GET\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(),\n    })\n      .then((res) => res.json())\n      .then((accounts) => {\n        if (accounts.error) {\n          console.log(accounts);\n          alert(\"error\");\n        } else {\n          console.log(accounts.data);\n          dispatch(fetchedAccounts(accounts.data));\n        }\n      })\n      .catch(console.log);\n  };\n};\n\nexport const login = (form, history) => {\n  let token = Cookies.get(\"\");\n  return (dispatch) => {\n    return fetch(\"http://localhost:3001/api/v1/login\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: token,\n      },\n      body: JSON.stringify(form),\n    })\n      .then((res) => res.json())\n      .then((account) => {\n        console.log(account);\n        if (account.error || account === null || account === undefined) {\n          console.log(\"no\");\n        } else {\n          console.log(\"yes\");\n          console.log(account.data);\n          localStorage.setItem(\"loggedIn\", true);\n          dispatch(setCurrentAccount(account.data));\n          history.push(`/accounts/${account.data.id}`);\n        }\n      })\n      .catch(console.log);\n  };\n};\n\n//should we be using async/await?\nexport const signup = (form, history) => {\n  return (dispatch) => {\n    console.log(\"form is: \");\n    console.log(form);\n    return fetch(\"http://localhost:3001/api/v1/signup\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(form),\n    })\n      .then((res) => res.json()) //parse JSON\n      .then((account) => {\n        console.log(account);\n        console.log(history);\n        if (account.error) {\n          console.log(\"no\");\n        } else {\n          localStorage.setItem(\"loggedIn\", true);\n          console.log(account.data);\n          dispatch(setCurrentAccount(account.data));\n          history.push(`/accounts/${account.data.id}`);\n        }\n      })\n      .catch(console.log);\n  };\n};\n"]},"metadata":{},"sourceType":"module"}