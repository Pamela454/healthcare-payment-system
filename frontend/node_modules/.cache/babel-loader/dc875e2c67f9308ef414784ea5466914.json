{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection'; //import {injectStripe} from 'react-stripe-elements';\n//import { newPayment } from \"../actions/currentPayments\";\n//form data available in local state or store? \n//class component, local state holding \n\nconst PaymentNew = props => {\n  _s();\n\n  const [form, setForm] = useState({\n    amount: ''\n  }); //const accountId = this.props\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n    setForm({ ...form,\n      [target]: event.target.value\n    });\n  };\n  /*const handlePaymentFormSubmit = (event, accountId) => {\n       event.preventDefault()\n       newPayment(form, accountId)\n  }*/\n\n\n  const handlePaymentFormSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.'); // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n\n      return;\n    }\n\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n\n    if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result); // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n\n      console.log(result.token);\n      stripeTokenHandler(result.token);\n    }\n  };\n\n  async function stripeTokenHandler(token) {\n    const paymentData = {\n      token: token.id\n    }; // Use fetch to send the token ID and any other payment data to your server.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n\n    const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(paymentData)\n    });\n    console.log(response); // Return and display the result of the charge.\n\n    return response.json();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewPayment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"New Payment\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handlePaymentFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"amount\",\n    type: \"text\",\n    name: \"amount\",\n    autoComplete: \"on\",\n    value: form.amount,\n    onChange: event => handlePaymentFormChange(event, \"amount\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"cardnumber\",\n    type: \"text\",\n    name: \"card number\",\n    autoComplete: \"on\",\n    value: form.cardnumber,\n    onChange: event => handlePaymentFormChange(event, \"cardnumber\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"expiration\",\n    type: \"text\",\n    name: \"expiration\",\n    autoComplete: \"on\",\n    value: form.expiration,\n    onChange: event => handlePaymentFormChange(event, \"expiration\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"cvc\",\n    type: \"text\",\n    name: \"cvc\",\n    autoComplete: \"on\",\n    value: form.cvc,\n    onChange: event => handlePaymentFormChange(event, \"cvc\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    placeholder: \"submit\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Make Payment\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }));\n};\n/*const mapStateToProps = state => {\n  return {\n    form: state.form \n  };\n};*/\n\n\n_s(PaymentNew, \"T/xizoYjpIosfZIegBJ2XcErFRE=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = PaymentNew;\nexport default PaymentNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentNew\");","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js"],"names":["React","useState","withRouter","connect","loadStripe","useStripe","useElements","CardElement","CardSection","PaymentNew","props","form","setForm","amount","stripe","elements","handlePaymentFormChange","event","target","value","handlePaymentFormSubmit","preventDefault","alert","card","getElement","result","createToken","error","console","log","message","token","stripeTokenHandler","paymentData","id","response","fetch","method","headers","body","JSON","stringify","json","cardnumber","expiration","cvc"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {loadStripe} from '@stripe/stripe-js';\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\n//import {injectStripe} from 'react-stripe-elements';\n//import { newPayment } from \"../actions/currentPayments\";\n\n//form data available in local state or store? \n//class component, local state holding \nconst PaymentNew = (props) => {\n\n  const [form, setForm] = useState({\n    amount: ''\n  });\n\n  //const accountId = this.props\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n     setForm({\n      ...form,\n     [target]: event.target.value, \n    });\n  }\n\n\n  /*const handlePaymentFormSubmit = (event, accountId) => {\n       event.preventDefault()\n       newPayment(form, accountId)\n  }*/\n\n  const handlePaymentFormSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.');\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n\n    if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result)\n      // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n      console.log(result.token)\n      stripeTokenHandler(result.token);\n    }\n  };\n\n async function stripeTokenHandler(token) {\n  const paymentData = {token: token.id};\n  // Use fetch to send the token ID and any other payment data to your server.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData),\n  });\n    console.log(response)\n  // Return and display the result of the charge.\n  return response.json();\n}\n\n  return (\n\t\t<div className=\"NewPayment\">\n        <h1>New Payment</h1>\n        <form onSubmit={handlePaymentFormSubmit}>\n          <input\n            placeholder=\"amount\"\n            type=\"text\"\n            name=\"amount\"\n            autoComplete=\"on\"\n            value={form.amount}\n            onChange={(event)=> handlePaymentFormChange(event, \"amount\")}\n          /><br/>\n          <input\n            placeholder=\"cardnumber\"\n            type=\"text\"\n            name=\"card number\"\n            autoComplete=\"on\"\n            value={form.cardnumber}\n            onChange={(event)=> handlePaymentFormChange(event, \"cardnumber\")}\n          /><br/>\n          <input\n            placeholder=\"expiration\"\n            type=\"text\"\n            name=\"expiration\"\n            autoComplete=\"on\"\n            value={form.expiration}\n            onChange={(event)=> handlePaymentFormChange(event, \"expiration\")}\n          /><br/>\n          <input\n            placeholder=\"cvc\"\n            type=\"text\"\n            name=\"cvc\"\n            autoComplete=\"on\"\n            value={form.cvc}\n            onChange={(event)=> handlePaymentFormChange(event, \"cvc\")}\n          /><br/>\n          <CardSection />\n        <button placeholder=\"submit\" type=\"submit\">\n            Make Payment\n          </button> \n          <br></br>     \n          <br></br>             \n          <div>\n          </div>\n          </form>\n          <div>\n        </div>\n      </div>\n  )\n}\n\n\n/*const mapStateToProps = state => {\n  return {\n    form: state.form \n  };\n};*/\n\nexport default (PaymentNew);\n"]},"metadata":{},"sourceType":"module"}