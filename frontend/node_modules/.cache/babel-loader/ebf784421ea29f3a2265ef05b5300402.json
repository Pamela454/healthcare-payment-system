{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; //for function components\n\nimport { Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\"; //import {loadStripe} from '@stripe/stripe-js';\n//import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n//import CardSection from './CardSection';\n//import {injectStripe} from 'react-stripe-elements';\n\nimport { newPayment } from \"../actions/currentPayments\"; //form data available in local state or store?\n//class component, local state holding\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentNew = props => {\n  _s();\n\n  console.log(props);\n  const [newPaymentFormData, setForm] = useState({\n    amount: \"\",\n    cardnumber: \"\",\n    expiration: \"\",\n    cvc: \"\",\n    account_id: props.account.id\n  }); //const stripe = useStripe();\n  //const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n    setForm({ ...newPaymentFormData,\n      [target]: event.target.value\n    });\n  };\n\n  const handlePaymentFormSubmit = event => {\n    event.preventDefault(); //console.log(props);\n\n    console.log(newPaymentFormData);\n    props.newPayment(newPaymentFormData, props.history);\n  };\n  /*const handlePaymentFormSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n     if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.');\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n     const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n     if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result)\n      // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n      console.log(result.token)\n      stripeTokenHandler(result.token);\n    }\n  };\n  async function stripeTokenHandler(token) {\n  const paymentData = {token: token.id};\n  // Use fetch to send the token ID and any other payment data to your server.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData),\n  });\n    console.log(response)\n  // Return and display the result of the charge.\n  return response.json();\n  }*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NewPayment\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"text-center\",\n      children: \"New Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      class: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handlePaymentFormSubmit,\n        class: \"form-inline\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputamount\",\n            class: \"form-label\",\n            children: [\"Amount:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"amount\",\n            type: \"text\",\n            class: \"form-control-sm\",\n            name: \"amount\",\n            autoComplete: \"on\",\n            value: newPaymentFormData.amount,\n            onChange: event => handlePaymentFormChange(event, \"amount\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputcardnumber\",\n            class: \"form-label\",\n            children: [\"Card Number:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"cardnumber\",\n            type: \"text\",\n            name: \"card number\",\n            autoComplete: \"on\",\n            value: newPaymentFormData.cardnumber,\n            onChange: event => handlePaymentFormChange(event, \"cardnumber\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputexpiration\",\n            class: \"form-label\",\n            children: [\"Expiration:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"expiration\",\n            type: \"text\",\n            name: \"expiration\",\n            autoComplete: \"on\",\n            value: newPaymentFormData.expiration,\n            onChange: event => handlePaymentFormChange(event, \"expiration\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputcvc\",\n            class: \"form-label\",\n            children: [\"CVC:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"cvc\",\n            type: \"text\",\n            name: \"cvc\",\n            autoComplete: \"on\",\n            value: newPaymentFormData.cvc,\n            onChange: event => handlePaymentFormChange(event, \"cvc\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            //placeholder=\"departments\"\n            type: \"text\",\n            name: \"departments\",\n            autoComplete: \"on\",\n            value: props.account.relationships.departments.data,\n            onChange: event => handlePaymentFormChange(event, \"departments\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          class: \"btn btn-outline-primary\",\n          children: \"Make Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n/*const mapStateToProps = (state) => {\n  return {\n    newPaymentFormData: state.newPaymentFormData,\n  };\n};*/\n\n\n_s(PaymentNew, \"oJE4fK8hu/GJtgM+KPhcqaqPxxA=\");\n\n_c = PaymentNew;\nexport default withRouter(connect(null, {\n  newPayment\n})(PaymentNew));\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentNew\");","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js"],"names":["React","useState","Form","withRouter","connect","newPayment","PaymentNew","props","console","log","newPaymentFormData","setForm","amount","cardnumber","expiration","cvc","account_id","account","id","handlePaymentFormChange","event","target","value","handlePaymentFormSubmit","preventDefault","history","relationships","departments","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAAyC;;AACzC,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,4BAA3B,C,CACA;AACA;;;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM,CAACG,kBAAD,EAAqBC,OAArB,IAAgCV,QAAQ,CAAC;AAC7CW,IAAAA,MAAM,EAAE,EADqC;AAE7CC,IAAAA,UAAU,EAAE,EAFiC;AAG7CC,IAAAA,UAAU,EAAE,EAHiC;AAI7CC,IAAAA,GAAG,EAAE,EAJwC;AAK7CC,IAAAA,UAAU,EAAET,KAAK,CAACU,OAAN,CAAcC;AALmB,GAAD,CAA9C,CAF4B,CAU5B;AACA;;AAEA,QAAMC,uBAAuB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjDV,IAAAA,OAAO,CAAC,EACN,GAAGD,kBADG;AAEN,OAACW,MAAD,GAAUD,KAAK,CAACC,MAAN,CAAaC;AAFjB,KAAD,CAAP;AAID,GALD;;AAOA,QAAMC,uBAAuB,GAAIH,KAAD,IAAW;AACzCA,IAAAA,KAAK,CAACI,cAAN,GADyC,CAEzC;;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYC,kBAAZ;AACAH,IAAAA,KAAK,CAACF,UAAN,CAAiBK,kBAAjB,EAAqCH,KAAK,CAACkB,OAA3C;AACD,GALD;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAME,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAI,MAAA,KAAK,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,KAAK,EAAC,aAAZ;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEF,uBAAhB;AAAyC,QAAA,KAAK,EAAC,aAA/C;AAAA,gCACE;AAAK,UAAA,KAAK,EAAC,+BAAX;AAAA,kCACE;AAAO,YAAA,GAAG,EAAC,aAAX;AAAyB,YAAA,KAAK,EAAC,YAA/B;AAAA,kCACU,GADV;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AACE,YAAA,WAAW,EAAC,QADd;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,KAAK,EAAC,iBAHR;AAIE,YAAA,IAAI,EAAC,QAJP;AAKE,YAAA,YAAY,EAAC,IALf;AAME,YAAA,KAAK,EAAEb,kBAAkB,CAACE,MAN5B;AAOE,YAAA,QAAQ,EAAGQ,KAAD,IAAWD,uBAAuB,CAACC,KAAD,EAAQ,QAAR;AAP9C;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE;AAAK,UAAA,KAAK,EAAC,gCAAX;AAAA,kCACE;AAAO,YAAA,GAAG,EAAC,iBAAX;AAA6B,YAAA,KAAK,EAAC,YAAnC;AAAA,uCACe,GADf;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AACE,YAAA,WAAW,EAAC,YADd;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,IAAI,EAAC,aAHP;AAIE,YAAA,YAAY,EAAC,IAJf;AAKE,YAAA,KAAK,EAAEV,kBAAkB,CAACG,UAL5B;AAME,YAAA,QAAQ,EAAGO,KAAD,IAAWD,uBAAuB,CAACC,KAAD,EAAQ,YAAR;AAN9C;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF,eA8BE;AAAA;AAAA;AAAA;AAAA,gBA9BF,eA+BE;AAAK,UAAA,KAAK,EAAC,gCAAX;AAAA,kCACE;AAAO,YAAA,GAAG,EAAC,iBAAX;AAA6B,YAAA,KAAK,EAAC,YAAnC;AAAA,sCACc,GADd;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AACE,YAAA,WAAW,EAAC,YADd;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,IAAI,EAAC,YAHP;AAIE,YAAA,YAAY,EAAC,IAJf;AAKE,YAAA,KAAK,EAAEV,kBAAkB,CAACI,UAL5B;AAME,YAAA,QAAQ,EAAGM,KAAD,IAAWD,uBAAuB,CAACC,KAAD,EAAQ,YAAR;AAN9C;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/BF,eA6CE;AAAA;AAAA;AAAA;AAAA,gBA7CF,eA8CE;AAAK,UAAA,KAAK,EAAC,gCAAX;AAAA,kCACE;AAAO,YAAA,GAAG,EAAC,UAAX;AAAsB,YAAA,KAAK,EAAC,YAA5B;AAAA,+BACO,GADP;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AACE,YAAA,WAAW,EAAC,KADd;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,IAAI,EAAC,KAHP;AAIE,YAAA,YAAY,EAAC,IAJf;AAKE,YAAA,KAAK,EAAEV,kBAAkB,CAACK,GAL5B;AAME,YAAA,QAAQ,EAAGK,KAAD,IAAWD,uBAAuB,CAACC,KAAD,EAAQ,KAAR;AAN9C;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9CF,eA4DE;AAAA;AAAA;AAAA;AAAA,gBA5DF,eA6DE;AAAK,UAAA,KAAK,EAAC,gCAAX;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE;AACA,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,IAAI,EAAC,aAHP;AAIE,YAAA,YAAY,EAAC,IAJf;AAKE,YAAA,KAAK,EAAEb,KAAK,CAACU,OAAN,CAAcS,aAAd,CAA4BC,WAA5B,CAAwCC,IALjD;AAME,YAAA,QAAQ,EAAGR,KAAD,IACRD,uBAAuB,CAACC,KAAD,EAAQ,aAAR;AAP3B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7DF,eA0EE;AAAA;AAAA;AAAA;AAAA,gBA1EF,eA2EE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,KAAK,EAAC,yBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3EF,eA8EE;AAAA;AAAA;AAAA;AAAA,gBA9EF,eA+EE;AAAA;AAAA;AAAA;AAAA,gBA/EF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwFD,CA9JD;AAgKA;AACA;AACA;AACA;AACA;;;GApKMd,U;;KAAAA,U;AAsKN,eAAeH,UAAU,CAACC,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAA8BC,UAA9B,CAAD,CAAzB","sourcesContent":["import React, { useState } from \"react\"; //for function components\nimport { Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n//import {loadStripe} from '@stripe/stripe-js';\n//import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n//import CardSection from './CardSection';\n//import {injectStripe} from 'react-stripe-elements';\nimport { newPayment } from \"../actions/currentPayments\";\n//form data available in local state or store?\n//class component, local state holding\nconst PaymentNew = (props) => {\n  console.log(props);\n  const [newPaymentFormData, setForm] = useState({\n    amount: \"\",\n    cardnumber: \"\",\n    expiration: \"\",\n    cvc: \"\",\n    account_id: props.account.id,\n  });\n\n  //const stripe = useStripe();\n  //const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n    setForm({\n      ...newPaymentFormData,\n      [target]: event.target.value,\n    });\n  };\n\n  const handlePaymentFormSubmit = (event) => {\n    event.preventDefault();\n    //console.log(props);\n    console.log(newPaymentFormData);\n    props.newPayment(newPaymentFormData, props.history);\n  };\n\n  /*const handlePaymentFormSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.');\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n\n    if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result)\n      // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n      console.log(result.token)\n      stripeTokenHandler(result.token);\n    }\n  };\n\n async function stripeTokenHandler(token) {\n  const paymentData = {token: token.id};\n  // Use fetch to send the token ID and any other payment data to your server.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData),\n  });\n    console.log(response)\n  // Return and display the result of the charge.\n  return response.json();\n}*/\n\n  return (\n    <div className=\"NewPayment\">\n      <h1 class=\"text-center\">New Payment</h1>\n      <body class=\"text-center\">\n        <Form onSubmit={handlePaymentFormSubmit} class=\"form-inline\">\n          <div class=\"form-group align-items-center\">\n            <label for=\"inputamount\" class=\"form-label\">\n              Amount:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"amount\"\n              type=\"text\"\n              class=\"form-control-sm\"\n              name=\"amount\"\n              autoComplete=\"on\"\n              value={newPaymentFormData.amount}\n              onChange={(event) => handlePaymentFormChange(event, \"amount\")}\n            />\n          </div>\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputcardnumber\" class=\"form-label\">\n              Card Number:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"cardnumber\"\n              type=\"text\"\n              name=\"card number\"\n              autoComplete=\"on\"\n              value={newPaymentFormData.cardnumber}\n              onChange={(event) => handlePaymentFormChange(event, \"cardnumber\")}\n            />\n          </div>\n          <br />\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputexpiration\" class=\"form-label\">\n              Expiration:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"expiration\"\n              type=\"text\"\n              name=\"expiration\"\n              autoComplete=\"on\"\n              value={newPaymentFormData.expiration}\n              onChange={(event) => handlePaymentFormChange(event, \"expiration\")}\n            />\n          </div>\n          <br />\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputcvc\" class=\"form-label\">\n              CVC:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"cvc\"\n              type=\"text\"\n              name=\"cvc\"\n              autoComplete=\"on\"\n              value={newPaymentFormData.cvc}\n              onChange={(event) => handlePaymentFormChange(event, \"cvc\")}\n            />\n          </div>\n          <br />\n          <div class=\"form-group  align-items-center\">\n            <br></br>\n            <input\n              //placeholder=\"departments\"\n              type=\"text\"\n              name=\"departments\"\n              autoComplete=\"on\"\n              value={props.account.relationships.departments.data}\n              onChange={(event) =>\n                handlePaymentFormChange(event, \"departments\")\n              }\n            />\n          </div>\n          <br />\n          <button type=\"submit\" class=\"btn btn-outline-primary\">\n            Make Payment\n          </button>\n          <br></br>\n          <br></br>\n        </Form>\n      </body>\n    </div>\n  );\n};\n\n/*const mapStateToProps = (state) => {\n  return {\n    newPaymentFormData: state.newPaymentFormData,\n  };\n};*/\n\nexport default withRouter(connect(null, { newPayment })(PaymentNew));\n"]},"metadata":{},"sourceType":"module"}