{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, withRouter } from \"react-router-dom\"; //import Departments from './components/Departments'\n//import React, { useState } from 'react';\n\nimport { connect } from 'react-redux';\nimport { loggedIn } from \"./actions/currentAccount.js\"; //import Logout from './components/registrations/Logout';\n//import Payments from './components/Payments'\n\nimport AccountContainer from './containers/AccountContainer';\nimport Navbar from './components/Navbar';\nimport Login from './components/registrations/Login';\nimport Signup from './components/registrations/Signup'; //if constantly passing down props consider connecting to the store\n\nclass App extends Component {\n  //componentDidMount() { //can set state which then causes an update \n  //this.props.getCurrentAccount(); //does this need to be a hook? \n  //}\n  //componentDidMount() {\n  //if (localStorage.getItem(\"loggedIn\")) {\n  //loggedIn(this.props.history);\n  //}\n  //}\n  render() {\n    const currentAccount = localStorage.getItem(\"loggedIn\");\n    return console.log(this.props), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }\n    }, currentAccount ? `Logged in as ${this.props.loginFormReducer.attributes.name}` : \"Not logged in\", \" \"), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: props => /*#__PURE__*/React.createElement(Login, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 57\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signup\",\n      render: props => /*#__PURE__*/React.createElement(Signup, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 58\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/accounts/:id\",\n      render: props => {\n        return /*#__PURE__*/React.createElement(AccountContainer, Object.assign({}, props, {\n          account: currentAccount,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 20\n          }\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    })), currentAccount ? /*#__PURE__*/React.createElement(Navbar, {\n      account: currentAccount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 29\n      }\n    }) : null);\n  }\n\n} //gives access to part of store \n//receives entire state as it's argument \n\n\nconst mapStateToProps = state => {\n  //what portion of state to provide to props \n  return { //executed with each change to the store. \n    ...state\n  };\n}; //need to add in currentAccount action\n\n\nexport default withRouter(connect(mapStateToProps, {\n  loggedIn\n})(App)); // specifies component to provide data to.","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/App.js"],"names":["React","Component","Switch","Route","withRouter","connect","loggedIn","AccountContainer","Navbar","Login","Signup","App","render","currentAccount","localStorage","getItem","console","log","props","loginFormReducer","attributes","name","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,QAA0C,kBAA1C,C,CACA;AACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,6BAAzB,C,CACA;AACA;;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB,C,CAEA;;AAEA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAE1B;AACE;AACF;AACA;AACE;AACE;AACF;AACF;AAGAW,EAAAA,MAAM,GAAG;AACP,UAAMC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAvB;AAEA,WACEC,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB,gBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAML,cAAc,GACxB,gBAAe,KAAKK,KAAL,CAAWC,gBAAX,CAA4BC,UAA5B,CAAuCC,IAAK,EADnC,GAEzB,eAFK,MADP,eAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,QAAlB;AAA2B,MAAA,MAAM,EAAEH,KAAK,iBAAM,oBAAC,KAAD,oBAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AAA4B,MAAA,MAAM,EAAEA,KAAK,iBAAM,oBAAC,MAAD,oBAAYA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,eAAlB;AAAkC,MAAA,MAAM,EAAEA,KAAK,IAAI;AACjD,4BAAO,oBAAC,gBAAD,oBAAsBA,KAAtB;AAA6B,UAAA,OAAO,EAAEL,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAJF,EAYKA,cAAc,gBAAG,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEA,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAwC,IAZ3D,CAFF;AAiBD;;AAhCyB,C,CAkC5B;AACA;;;AACA,MAAMS,eAAe,GAAGC,KAAK,IAAI;AAAE;AACjC,SAAO,EAAE;AACP,OAAGA;AADE,GAAP;AAGD,CAJD,C,CAKA;;;AACA,eAAenB,UAAU,CAACC,OAAO,CAACiB,eAAD,EAAkB;AAAEhB,EAAAA;AAAF,CAAlB,CAAP,CAAuCK,GAAvC,CAAD,CAAzB,C,CAAwE","sourcesContent":["import React, { Component } from 'react';\nimport { Switch, Route, withRouter } from \"react-router-dom\";\n//import Departments from './components/Departments'\n//import React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport { loggedIn } from \"./actions/currentAccount.js\"\n//import Logout from './components/registrations/Logout';\n//import Payments from './components/Payments'\nimport AccountContainer from './containers/AccountContainer'\nimport Navbar from './components/Navbar'\nimport Login from './components/registrations/Login'\nimport Signup from './components/registrations/Signup'\n\n//if constantly passing down props consider connecting to the store\n\nclass App extends Component {\n\n  //componentDidMount() { //can set state which then causes an update \n    //this.props.getCurrentAccount(); //does this need to be a hook? \n  //}\n  //componentDidMount() {\n    //if (localStorage.getItem(\"loggedIn\")) {\n      //loggedIn(this.props.history);\n    //}\n  //}\n\n\n  render() {\n    const currentAccount = localStorage.getItem(\"loggedIn\");\n\n    return (\n      console.log(this.props),\n      <div className=\"App\">\n             <h2>{ currentAccount ? \n        `Logged in as ${this.props.loginFormReducer.attributes.name}` :\n        \"Not logged in\" } </h2>\n        <Switch> \n          <Route exact path='/login' render={props => ( <Login {...props}/>)}/>\n          <Route exact path='/signup' render={props => ( <Signup {...props}/>)}/>\n          <Route exact path='/accounts/:id' render={props => {\n            return <AccountContainer {...props} account={currentAccount}/>\n          } \n        }/>\n        </Switch>\n         { currentAccount ? <Navbar account={currentAccount}/> : null } \n    </div>\n    );\n  }\n}\n//gives access to part of store \n//receives entire state as it's argument \nconst mapStateToProps = state => { //what portion of state to provide to props \n  return { //executed with each change to the store. \n    ...state\n  };\n}\n//need to add in currentAccount action\nexport default withRouter(connect(mapStateToProps, { loggedIn })(App)); // specifies component to provide data to. "]},"metadata":{},"sourceType":"module"}