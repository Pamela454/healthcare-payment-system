{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/components/registrations/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { login } from \"../../actions/currentAccount\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setCurrentAccount } from \"../../actions/currentAccount\"; //data handled by component\n//useForm hook?\n//value of form input is determined by the state, state dictated by input field values\n// only use hooks with function components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = ({\n  login,\n  name,\n  password,\n  setCurrentAccount,\n  history\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    //array destructuring\n    account: {\n      name: \"\",\n      password: \"\"\n    }\n  });\n\n  const handleLoginFormChange = (event, target) => {\n    setForm({ ...form,\n      [target]: event.target.value\n    }); //can add validations for prior to form submission\n  };\n\n  const handleLoginFormSubmit = event => {\n    //does this need to be bound?\n    event.preventDefault(); //state contains most up to date form data. prevent page refresh\n\n    login(form, history);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleLoginFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"inputname\",\n          className: \"form-label\",\n          children: [\"Name:\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"name\",\n          type: \"text\",\n          className: \"form-control-sm\",\n          id: \"Input1\",\n          name: \"name\",\n          autoComplete: \"on\",\n          value: form.name || \"\",\n          onChange: event => handleLoginFormChange(event, \"name\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group  align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"inputpassword\",\n          className: \"form-label\",\n          children: [\"Password:\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"password\",\n          type: \"password\",\n          className: \"form-control-sm\",\n          name: \"password\",\n          autoComplete: \"on\",\n          value: form.password || \"\",\n          onChange: event => handleLoginFormChange(event, \"password\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-outline-primary\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"uian5Y7mJCaGEY0VkNVJwmALHyg=\");\n\n_c = Login;\n\nconst mapStateToProps = state => {\n  //do I need this?\n  //need props passed in at the top\n  return {\n    form: state.form\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  login,\n  setCurrentAccount\n})(Login));\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/components/registrations/Login.js"],"names":["React","useState","Form","login","withRouter","connect","setCurrentAccount","Login","name","password","history","form","setForm","account","handleLoginFormChange","event","target","value","handleLoginFormSubmit","preventDefault","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { login } from \"../../actions/currentAccount\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setCurrentAccount } from \"../../actions/currentAccount\";\n//data handled by component\n//useForm hook?\n//value of form input is determined by the state, state dictated by input field values\n// only use hooks with function components\nconst Login = ({ login, name, password, setCurrentAccount, history }) => {\n  const [form, setForm] = useState({\n    //array destructuring\n    account: {\n      name: \"\",\n      password: \"\",\n    },\n  });\n\n  const handleLoginFormChange = (event, target) => {\n    setForm({\n      ...form,\n      [target]: event.target.value,\n    }); //can add validations for prior to form submission\n  };\n\n  const handleLoginFormSubmit = (event) => {\n    //does this need to be bound?\n    event.preventDefault(); //state contains most up to date form data. prevent page refresh\n    login(form, history);\n  };\n\n  return (\n    <div className=\"Login\">\n      <h1 className=\"text-center\">Log In</h1>\n      <Form onSubmit={handleLoginFormSubmit}>\n        <div className=\"form-group align-items-center\">\n          <label htmlFor=\"inputname\" className=\"form-label\">\n            Name:{\" \"}\n          </label>\n          <br></br>\n          <input\n            placeholder=\"name\"\n            type=\"text\"\n            className=\"form-control-sm\"\n            id=\"Input1\"\n            name=\"name\"\n            autoComplete=\"on\"\n            value={form.name || \"\"}\n            onChange={(event) => handleLoginFormChange(event, \"name\")}\n          />\n        </div>\n        <br></br>\n        <br></br>\n        <div className=\"form-group  align-items-center\">\n          <label htmlFor=\"inputpassword\" className=\"form-label\">\n            Password:{\" \"}\n          </label>\n          <br></br>\n          <input\n            placeholder=\"password\"\n            type=\"password\"\n            className=\"form-control-sm\"\n            name=\"password\"\n            autoComplete=\"on\"\n            value={form.password || \"\"}\n            onChange={(event) => handleLoginFormChange(event, \"password\")}\n          />\n        </div>\n        <br />\n        <button type=\"submit\" className=\"btn btn-outline-primary\">\n          Log In\n        </button>\n        <div></div>\n      </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  //do I need this?\n  //need props passed in at the top\n  return {\n    form: state.form,\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, { login, setCurrentAccount })(Login)\n);\n"]},"metadata":{},"sourceType":"module"}