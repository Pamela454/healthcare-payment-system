{"ast":null,"code":"export default function accountReducer(state = {\n  accounts: []\n}, action) {\n  //combines current state and action \n  switch (action.type) {\n    case 'SET_CURRENT_ACCOUNT':\n      return {\n        account: action.payload\n      };\n\n    case 'ADD_ACCOUNT':\n      //creates a new object \n      return { ...state,\n        account: [...state.account, action.payload]\n      };\n    //only override specific property \n\n    case 'ADD_DEPARTMENT':\n      //at least returns some version of state\n      let account = state.account;\n\n      if (account.id === action.payload.id) {\n        return action.payload;\n      } else {\n        return account;\n      }\n\n    //return {...state, account: account}\n\n    case 'DELETE_TRANSACTION':\n      //at least returns some version of state\n      //let accountsNext = state.accounts.map(account => {\n      if (account.id === action.payload.id) {\n        return action.payload;\n      } else {\n        return account;\n      }\n\n    //})\n    //return {...state, accounts: accountsNext}\n\n    default:\n      return state;\n    //never return null \n  }\n} //reducer is a function \n//state as object vs array\n//updates the state based on the action \n//switch case statement so as not to clutter code with many if else statements","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/reducers/accountReducer.js"],"names":["accountReducer","state","accounts","action","type","account","payload","id"],"mappings":"AAAA,eAAe,SAASA,cAAT,CAAwBC,KAAK,GAAG;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAhC,EAAgDC,MAAhD,EAAwD;AAAG;AACzE,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,qBAAL;AACQ,aAAO;AAACC,QAAAA,OAAO,EAAEF,MAAM,CAACG;AAAjB,OAAP;;AACN,SAAK,aAAL;AAAoB;AACd,aAAO,EAAC,GAAGL,KAAJ;AAAWI,QAAAA,OAAO,EAAE,CAAC,GAAGJ,KAAK,CAACI,OAAV,EAAmBF,MAAM,CAACG,OAA1B;AAApB,OAAP;AAA+D;;AACrE,SAAK,gBAAL;AAAuB;AACjB,UAAID,OAAO,GAAGJ,KAAK,CAACI,OAApB;;AACC,UAAIA,OAAO,CAACE,EAAR,KAAeJ,MAAM,CAACG,OAAP,CAAeC,EAAlC,EAAsC;AACpC,eAAOJ,MAAM,CAACG,OAAd;AACD,OAFD,MAEO;AACL,eAAOD,OAAP;AACD;;AACF;;AACN,SAAK,oBAAL;AAA2B;AACrB;AACE,UAAIA,OAAO,CAACE,EAAR,KAAeJ,MAAM,CAACG,OAAP,CAAeC,EAAlC,EAAsC;AACpC,eAAOJ,MAAM,CAACG,OAAd;AACD,OAFD,MAEO;AACL,eAAOD,OAAP;AACD;;AACH;AACA;;AACD;AACC,aAAOJ,KAAP;AAAa;AAvBtB;AAyBA,C,CAED;AACA;AACA;AACA","sourcesContent":["export default function accountReducer(state = {accounts: []}, action) {  //combines current state and action \n\tswitch (action.type) {\n\t\tcase 'SET_CURRENT_ACCOUNT':\n          return {account: action.payload}\n    case 'ADD_ACCOUNT': //creates a new object \n          return {...state, account: [...state.account, action.payload]} //only override specific property \n    case 'ADD_DEPARTMENT': //at least returns some version of state\n          let account = state.account\n          \tif (account.id === action.payload.id) {\n          \t  return action.payload \n          \t} else {\n          \t  return account \n          \t}\n          //return {...state, account: account}\n    case 'DELETE_TRANSACTION': //at least returns some version of state\n          //let accountsNext = state.accounts.map(account => {\n            if (account.id === action.payload.id) {\n              return action.payload \n            } else {\n              return account \n            }\n          //})\n          //return {...state, accounts: accountsNext}\n         default:\n          return state //never return null \n    }       \n}\n\n//reducer is a function \n//state as object vs array\n//updates the state based on the action \n//switch case statement so as not to clutter code with many if else statements \n"]},"metadata":{},"sourceType":"module"}