{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport Departments from './components/Departments'; //import React, { useState } from 'react';\n\nimport { connect } from 'react-redux';\nimport { getCurrentAccount } from \"./actions/currentAccount.js\"; //import Payments from './components/Payments'\n\nimport AccountContainer from './containers/AccountContainer';\nimport Navbar from './components/Navbar';\nimport Login from './components/registrations/Login';\nimport Logout from './components/registrations/Logout';\nimport Signup from './components/registrations/Signup'; //if constantly passing down props consider connecting to the store\n\nclass App extends Component {\n  //componentDidMount() { //can set state which then causes an update \n  //this.props.getCurrentAccount(); //does this need to be a hook? \n  //}\n  render() {\n    const {\n      currentAccount,\n      accounts\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, currentAccount ? `Logged in as ${currentAccount.name}` : \"Not logged in\"), /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signup\",\n      render: ({\n        history\n      }) => /*#__PURE__*/React.createElement(Signup, {\n        history: history,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 60\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/accounts/:id\",\n      render: props => {\n        return /*#__PURE__*/React.createElement(AccountContainer, Object.assign({}, props, {\n          account: currentAccount.account,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 20\n          }\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    })), currentAccount ? /*#__PURE__*/React.createElement(Logout, {\n      logout: this.logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }) : null, currentAccount ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getDepartments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, \"Departments\") : null, currentAccount ? /*#__PURE__*/React.createElement(Departments, {\n      departments: currentAccount.departments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 29\n      }\n    }) : null);\n  }\n\n} //gives access to part of store \n//receives entire state as it's argument \n\n\nconst mapStateToProps = ({\n  currentAccount\n}) => {\n  //what portion of state to provide to props \n  return {\n    //executed with each change to the store. \n    currentAccount\n  };\n}; //need to add in currentAccount action\n\n\nexport default withRouter(connect(mapStateToProps, {\n  getCurrentAccount\n})(App)); // specifies component to provide data to.","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/App.js"],"names":["React","Component","Switch","Route","withRouter","Departments","connect","getCurrentAccount","AccountContainer","Navbar","Login","Logout","Signup","App","render","currentAccount","accounts","props","name","history","account","logout","getDepartments","departments","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,QAA0C,kBAA1C;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,6BAAlC,C,CACA;;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB,C,CAEA;;AAEA,MAAMC,GAAN,SAAkBZ,SAAlB,CAA4B;AAE1B;AACE;AACF;AAIAa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAA+B,KAAKC,KAA1C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMF,cAAc,GACrB,gBAAeA,cAAc,CAACG,IAAK,EADd,GAEtB,eAFE,CADJ,eAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAME,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,QAAlB;AAA2B,MAAA,SAAS,EAAER,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AAA4B,MAAA,MAAM,EAAE,CAAC;AAACS,QAAAA;AAAD,OAAD,kBAAa,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,eAAlB;AAAkC,MAAA,MAAM,EAAEF,KAAK,IAAI;AACjD,4BAAO,oBAAC,gBAAD,oBAAsBA,KAAtB;AAA6B,UAAA,OAAO,EAAEF,cAAc,CAACK,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CANF,EAcKL,cAAc,gBACf,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAE,KAAKM,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADe,GACkB,IAfrC,EAgBKN,cAAc,gBACf;AAAQ,MAAA,OAAO,EAAE,KAAKO,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADe,GAC8C,IAjBjE,EAkBKP,cAAc,gBAAG,oBAAC,WAAD;AAAa,MAAA,WAAW,EAAEA,cAAc,CAACQ,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAA8D,IAlBjF,CADF;AAsBD;;AAjCyB,C,CAmC5B;AACA;;;AACA,MAAMC,eAAe,GAAG,CAAC;AAAET,EAAAA;AAAF,CAAD,KAAwB;AAAE;AAChD,SAAO;AAAE;AACPA,IAAAA;AADK,GAAP;AAGD,CAJD,C,CAKA;;;AACA,eAAeX,UAAU,CAACE,OAAO,CAACkB,eAAD,EAAkB;AAAEjB,EAAAA;AAAF,CAAlB,CAAP,CAAgDM,GAAhD,CAAD,CAAzB,C,CAAiF","sourcesContent":["import React, { Component } from 'react';\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport Departments from './components/Departments'\n//import React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport { getCurrentAccount } from \"./actions/currentAccount.js\"\n//import Payments from './components/Payments'\nimport AccountContainer from './containers/AccountContainer'\nimport Navbar from './components/Navbar'\nimport Login from './components/registrations/Login'\nimport Logout from './components/registrations/Logout'\nimport Signup from './components/registrations/Signup'\n\n//if constantly passing down props consider connecting to the store\n\nclass App extends Component {\n\n  //componentDidMount() { //can set state which then causes an update \n    //this.props.getCurrentAccount(); //does this need to be a hook? \n  //}\n\n\n\n  render() {\n    const { currentAccount, accounts } = this.props  \n\n    return (\n      <div className=\"App\">\n          <h2>{ currentAccount ? \n        `Logged in as ${currentAccount.name}`  :\n        \"Not logged in\" } \n         </h2> \n        <Navbar/>\n        <Switch> \n          <Route exact path='/login' component={Login}/>\n          <Route exact path='/signup' render={({history})=><Signup history={history}/>}/>\n          <Route exact path='/accounts/:id' render={props => {\n            return <AccountContainer {...props} account={currentAccount.account}/>\n          } \n        }/>\n        </Switch>\n         { currentAccount ? \n          <Logout logout={this.logout}/> : null }\n         { currentAccount ? \n          <button onClick={this.getDepartments}>Departments</button> : null }\n         { currentAccount ? <Departments departments={currentAccount.departments} /> : null } \n    </div>\n    );\n  }\n}\n//gives access to part of store \n//receives entire state as it's argument \nconst mapStateToProps = ({ currentAccount }) => { //what portion of state to provide to props \n  return { //executed with each change to the store. \n    currentAccount\n  };\n}\n//need to add in currentAccount action\nexport default withRouter(connect(mapStateToProps, { getCurrentAccount })(App)); // specifies component to provide data to. "]},"metadata":{},"sourceType":"module"}