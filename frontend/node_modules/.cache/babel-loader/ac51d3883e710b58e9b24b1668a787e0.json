{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\"; //import {loadStripe} from '@stripe/stripe-js';\n//import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n//import CardSection from './CardSection';\n//import {injectStripe} from 'react-stripe-elements';\n\nimport { newPayment } from \"../actions/currentPayments\"; //form data available in local state or store? \n//class component, local state holding \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentNew = ({\n  props,\n  amount,\n  cardnumber,\n  expiration,\n  cvc,\n  history,\n  accountId\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    amount: \"\",\n    cardnumber: \"\",\n    expiration: \"\",\n    cvc: \"\"\n  });\n  console.log(props); //const accountId = this.props\n  //const stripe = useStripe();\n  //const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n    console.log('handlePaymentFormChange-event-target.value: ' + event.target.value);\n    setForm({ ...form,\n      [target]: event.target.value\n    });\n  };\n\n  const handlePaymentFormSubmit = event => {\n    event.preventDefault();\n    console.log('handlePaymentFormSubmit-form: ' + JSON.stringify(form));\n    console.log('handlePaymentFormSubmit-accountId: ' + JSON.stringify(accountId));\n    newPayment(form, accountId);\n  };\n  /*const handlePaymentFormSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n     if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.');\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n     const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n     if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result)\n      // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n      console.log(result.token)\n      stripeTokenHandler(result.token);\n    }\n  };\n  async function stripeTokenHandler(token) {\n  const paymentData = {token: token.id};\n  // Use fetch to send the token ID and any other payment data to your server.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData),\n  });\n    console.log(response)\n  // Return and display the result of the charge.\n  return response.json();\n  }*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NewPayment\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"text-center\",\n      children: \"New Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      class: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handlePaymentFormSubmit,\n        class: \"form-inline\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputamount\",\n            class: \"form-label\",\n            children: [\"Amount:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"amount\",\n            type: \"text\",\n            class: \"form-control-sm\",\n            name: \"amount\",\n            autoComplete: \"on\",\n            value: form.amount,\n            onChange: event => handlePaymentFormChange(event, \"amount\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputcardnumber\",\n            class: \"form-label\",\n            children: [\"Card Number:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"cardnumber\",\n            type: \"text\",\n            name: \"card number\",\n            autoComplete: \"on\",\n            value: form.cardnumber,\n            onChange: event => handlePaymentFormChange(event, \"cardnumber\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputexpiration\",\n            class: \"form-label\",\n            children: [\"Expiration:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"expiration\",\n            type: \"text\",\n            name: \"expiration\",\n            autoComplete: \"on\",\n            value: form.expiration,\n            onChange: event => handlePaymentFormChange(event, \"expiration\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputcvc\",\n            class: \"form-label\",\n            children: [\"CVC:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"cvc\",\n            type: \"text\",\n            name: \"cvc\",\n            autoComplete: \"on\",\n            value: form.cvc,\n            onChange: event => handlePaymentFormChange(event, \"cvc\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          class: \"btn btn-outline-primary\",\n          children: \"Make Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PaymentNew, \"c3BT9RAT7NWn8ti/BPVU0vKDuAE=\");\n\n_c = PaymentNew;\n\nconst mapStateToProps = state => {\n  console.log('state.form is: ' + state.form);\n  return {\n    form: state.form\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  newPayment\n})(PaymentNew));\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentNew\");","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js"],"names":["React","useState","Form","withRouter","connect","newPayment","PaymentNew","props","amount","cardnumber","expiration","cvc","history","accountId","form","setForm","console","log","handlePaymentFormChange","event","target","value","handlePaymentFormSubmit","preventDefault","JSON","stringify","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useState } from 'react';\nimport { Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n//import {loadStripe} from '@stripe/stripe-js';\n//import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n//import CardSection from './CardSection';\n//import {injectStripe} from 'react-stripe-elements';\nimport { newPayment } from \"../actions/currentPayments\";\n\n//form data available in local state or store? \n//class component, local state holding \nconst PaymentNew = ({props, amount, cardnumber, expiration, cvc, history, accountId}) => {\n  const [form, setForm] = useState({\n    amount: \"\", \n    cardnumber: \"\",\n    expiration: \"\",\n    cvc: \"\"\n  });\n  console.log(props)\n\n  //const accountId = this.props\n  //const stripe = useStripe();\n  //const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n    console.log('handlePaymentFormChange-event-target.value: ' + event.target.value);\n     setForm({\n      ...form,\n     [target]: event.target.value, \n    });\n  }\n\n\n  const handlePaymentFormSubmit = (event) => {\n       event.preventDefault()\n       console.log('handlePaymentFormSubmit-form: ' + JSON.stringify(form))\n        console.log('handlePaymentFormSubmit-accountId: ' + JSON.stringify(accountId))\n       newPayment(form, accountId)\n  }\n\n  /*const handlePaymentFormSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.');\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n\n    if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result)\n      // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n      console.log(result.token)\n      stripeTokenHandler(result.token);\n    }\n  };\n\n async function stripeTokenHandler(token) {\n  const paymentData = {token: token.id};\n  // Use fetch to send the token ID and any other payment data to your server.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData),\n  });\n    console.log(response)\n  // Return and display the result of the charge.\n  return response.json();\n}*/\n\n return (\n\t\t<div className=\"NewPayment\">\n     <h1 class=\"text-center\">New Payment</h1>\n      <body class=\"text-center\">\n       <Form onSubmit={handlePaymentFormSubmit} class=\"form-inline\">\n        <div class=\"form-group align-items-center\">\n        <label for=\"inputamount\" class=\"form-label\">\n              Amount:{\" \"}\n        </label>\n          <br></br>\n          <input\n            placeholder=\"amount\"\n            type=\"text\"\n            class=\"form-control-sm\"\n            name=\"amount\"\n            autoComplete=\"on\"\n            value={form.amount}\n            onChange={(event)=> handlePaymentFormChange(event, \"amount\")}\n          />\n          </div>\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputcardnumber\" class=\"form-label\">\n              Card Number:{\" \"}\n            </label>\n            <br></br>\n          <input\n            placeholder=\"cardnumber\"\n            type=\"text\"\n            name=\"card number\"\n            autoComplete=\"on\"\n            value={form.cardnumber}\n            onChange={(event)=> handlePaymentFormChange(event, \"cardnumber\")}\n          />\n          </div>\n          <br/>\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputexpiration\" class=\"form-label\">\n              Expiration:{\" \"}\n            </label>\n            <br></br>\n          <input\n            placeholder=\"expiration\"\n            type=\"text\"\n            name=\"expiration\"\n            autoComplete=\"on\"\n            value={form.expiration}\n            onChange={(event)=> handlePaymentFormChange(event, \"expiration\")}\n          />\n          </div>\n          <br/>\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputcvc\" class=\"form-label\">\n              CVC:{\" \"}\n            </label>\n            <br></br>\n          <input\n            placeholder=\"cvc\"\n            type=\"text\"\n            name=\"cvc\"\n            autoComplete=\"on\"\n            value={form.cvc}\n            onChange={(event)=> handlePaymentFormChange(event, \"cvc\")}\n          />\n          </div>\n          <br/>\n        <button type=\"submit\" class=\"btn btn-outline-primary\">\n            Make Payment\n        </button> \n          <br></br>     \n          <br></br>             \n      </Form>\n    </body>\n  </div>\n  )\n}\n\n\nconst mapStateToProps = state => {\n  console.log('state.form is: ' + state.form);\n  return {\n    form: state.form \n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {newPayment})(PaymentNew));\n"]},"metadata":{},"sourceType":"module"}