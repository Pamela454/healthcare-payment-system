{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\"; //import {loadStripe} from '@stripe/stripe-js';\n//import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n//import CardSection from './CardSection';\n//import {injectStripe} from 'react-stripe-elements';\n\nimport { newPayment } from \"../actions/currentPayments\"; //form data available in local state or store?\n//class component, local state holding\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentNew = ({\n  amount,\n  cardnumber,\n  expiration,\n  cvc,\n  history,\n  accountId,\n  currentAccount,\n  newPayment\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    amount: \"\",\n    cardnumber: \"\",\n    expiration: \"\",\n    cvc: \"\"\n  }); //const accountId = this.props\n  //const stripe = useStripe();\n  //const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n    console.log(\"handlePaymentFormChange-event-target.value: \" + event.target.value);\n    setForm({ ...form,\n      [target]: event.target.value\n    });\n  };\n\n  const handlePaymentFormSubmit = (event, account) => {\n    event.preventDefault();\n    console.log(form);\n    console.log(this.props.account);\n    newPayment(form, accountId);\n  };\n  /*const handlePaymentFormSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n     if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.');\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n     const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n     if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result)\n      // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n      console.log(result.token)\n      stripeTokenHandler(result.token);\n    }\n  };\n  async function stripeTokenHandler(token) {\n  const paymentData = {token: token.id};\n  // Use fetch to send the token ID and any other payment data to your server.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData),\n  });\n    console.log(response)\n  // Return and display the result of the charge.\n  return response.json();\n  }*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NewPayment\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"text-center\",\n      children: \"New Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      class: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handlePaymentFormSubmit,\n        class: \"form-inline\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputamount\",\n            class: \"form-label\",\n            children: [\"Amount:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"amount\",\n            type: \"text\",\n            class: \"form-control-sm\",\n            name: \"amount\",\n            autoComplete: \"on\",\n            value: form.amount,\n            onChange: event => handlePaymentFormChange(event, \"amount\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputcardnumber\",\n            class: \"form-label\",\n            children: [\"Card Number:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"cardnumber\",\n            type: \"text\",\n            name: \"card number\",\n            autoComplete: \"on\",\n            value: form.cardnumber,\n            onChange: event => handlePaymentFormChange(event, \"cardnumber\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputexpiration\",\n            class: \"form-label\",\n            children: [\"Expiration:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"expiration\",\n            type: \"text\",\n            name: \"expiration\",\n            autoComplete: \"on\",\n            value: form.expiration,\n            onChange: event => handlePaymentFormChange(event, \"expiration\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"form-group  align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"inputcvc\",\n            class: \"form-label\",\n            children: [\"CVC:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"cvc\",\n            type: \"text\",\n            name: \"cvc\",\n            autoComplete: \"on\",\n            value: form.cvc,\n            onChange: event => handlePaymentFormChange(event, \"cvc\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          class: \"btn btn-outline-primary\",\n          children: \"Make Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaymentNew, \"BXZg62Lms6F5nDeFYnfLosS/INg=\");\n\n_c = PaymentNew;\n\nconst mapStateToProps = state => {\n  console.log(\"state.form is: \" + state.form);\n  return {\n    form: state.form\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  newPayment\n})(PaymentNew));\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentNew\");","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js"],"names":["React","useState","Form","withRouter","connect","newPayment","PaymentNew","amount","cardnumber","expiration","cvc","history","accountId","currentAccount","form","setForm","handlePaymentFormChange","event","target","console","log","value","handlePaymentFormSubmit","account","preventDefault","props","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n//import {loadStripe} from '@stripe/stripe-js';\n//import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n//import CardSection from './CardSection';\n//import {injectStripe} from 'react-stripe-elements';\nimport { newPayment } from \"../actions/currentPayments\";\n//form data available in local state or store?\n//class component, local state holding\n\nconst PaymentNew = ({\n  amount,\n  cardnumber,\n  expiration,\n  cvc,\n  history,\n  accountId,\n  currentAccount,\n  newPayment,\n}) => {\n  const [form, setForm] = useState({\n    amount: \"\",\n    cardnumber: \"\",\n    expiration: \"\",\n    cvc: \"\",\n  });\n\n  //const accountId = this.props\n  //const stripe = useStripe();\n  //const elements = useElements();\n\n  const handlePaymentFormChange = (event, target) => {\n    console.log(\n      \"handlePaymentFormChange-event-target.value: \" + event.target.value\n    );\n    setForm({\n      ...form,\n      [target]: event.target.value,\n    });\n  };\n\n  const handlePaymentFormSubmit = (event, account) => {\n    event.preventDefault();\n    console.log(form);\n    console.log(this.props.account);\n    newPayment(form, accountId);\n  };\n\n  /*const handlePaymentFormSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      alert('Stripe is not loaded yet.');\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n\n    if (result.error) {\n      // Show error to your customer.\n      console.log(result.error.message);\n    } else {\n      console.log(result)\n      // Send the token to your server.\n      // This function does not exist yet; we will define it in the next step.\n      console.log(result.token)\n      stripeTokenHandler(result.token);\n    }\n  };\n\n async function stripeTokenHandler(token) {\n  const paymentData = {token: token.id};\n  // Use fetch to send the token ID and any other payment data to your server.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const response = await fetch('http://localhost:3000/api/v1/accounts/${accountId}/charges', { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(paymentData),\n  });\n    console.log(response)\n  // Return and display the result of the charge.\n  return response.json();\n}*/\n\n  return (\n    <div className=\"NewPayment\">\n      <h1 class=\"text-center\">New Payment</h1>\n      <body class=\"text-center\">\n        <Form onSubmit={handlePaymentFormSubmit} class=\"form-inline\">\n          <div class=\"form-group align-items-center\">\n            <label for=\"inputamount\" class=\"form-label\">\n              Amount:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"amount\"\n              type=\"text\"\n              class=\"form-control-sm\"\n              name=\"amount\"\n              autoComplete=\"on\"\n              value={form.amount}\n              onChange={(event) => handlePaymentFormChange(event, \"amount\")}\n            />\n          </div>\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputcardnumber\" class=\"form-label\">\n              Card Number:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"cardnumber\"\n              type=\"text\"\n              name=\"card number\"\n              autoComplete=\"on\"\n              value={form.cardnumber}\n              onChange={(event) => handlePaymentFormChange(event, \"cardnumber\")}\n            />\n          </div>\n          <br />\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputexpiration\" class=\"form-label\">\n              Expiration:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"expiration\"\n              type=\"text\"\n              name=\"expiration\"\n              autoComplete=\"on\"\n              value={form.expiration}\n              onChange={(event) => handlePaymentFormChange(event, \"expiration\")}\n            />\n          </div>\n          <br />\n          <div class=\"form-group  align-items-center\">\n            <label for=\"inputcvc\" class=\"form-label\">\n              CVC:{\" \"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"cvc\"\n              type=\"text\"\n              name=\"cvc\"\n              autoComplete=\"on\"\n              value={form.cvc}\n              onChange={(event) => handlePaymentFormChange(event, \"cvc\")}\n            />\n          </div>\n          <br />\n          <button type=\"submit\" class=\"btn btn-outline-primary\">\n            Make Payment\n          </button>\n          <br></br>\n          <br></br>\n        </Form>\n      </body>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  console.log(\"state.form is: \" + state.form);\n  return {\n    form: state.form,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, { newPayment })(PaymentNew));\n"]},"metadata":{},"sourceType":"module"}