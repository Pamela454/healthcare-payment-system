{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/components/registrations/Signup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { signup } from \"../../actions/currentAccount\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Signup = ({\n  name,\n  password,\n  status,\n  signup,\n  history\n}) => {\n  _s();\n\n  const [signupFormData, setForm] = useState({\n    name: \"\",\n    password: \"\",\n    status: \"patient\" // NEED TO SET A DEFAULT VALUE OTHERWISE NOTHING WILL BE SENT TO THE BACKEND\n\n  });\n\n  const handleSignupFormChange = (event, target) => {\n    setForm({ ...signupFormData,\n      [target]: event.target.value\n    });\n  };\n\n  const handleSignupFormSubmit = event => {\n    event.preventDefault();\n    console.log(history);\n    signup(signupFormData, history);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Signup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSignupFormSubmit,\n      className: \"form-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"inputname\",\n          className: \"form-label\",\n          children: [\"Name:\", \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"name\",\n          type: \"text\",\n          className: \"form-control-sm\",\n          name: \"name\",\n          value: signupFormData.name,\n          onChange: event => handleSignupFormChange(event, \"name\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group  align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"inputpassword\",\n          className: \"form-label\",\n          children: [\"Password:\", \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"password\",\n          type: \"password\",\n          className: \"form-control-sm\",\n          name: \"password\",\n          value: signupFormData.password,\n          onChange: event => handleSignupFormChange(event, \"password\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group  align-items-center\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: signupFormData.status,\n            onChange: event => handleSignupFormChange(event, \"status\"),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"patient\",\n              children: \"Patient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"admin\",\n              children: \"Administrator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-outline-primary\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signup, \"r6xbyKR7rElI8N0ySxhkFo/Exjs=\");\n\n_c = Signup;\n\nconst mapStateToProps = state => {\n  //is this necessary?\n  //what portion of state to provide to props\n  //need props passed in at the top\n  return {\n    signupFormData: state.signupForm\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  signup\n})(Signup));\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/components/registrations/Signup.js"],"names":["React","useState","Form","connect","withRouter","signup","Signup","name","password","status","history","signupFormData","setForm","handleSignupFormChange","event","target","value","handleSignupFormSubmit","preventDefault","console","log","mapStateToProps","state","signupForm"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { signup } from \"../../actions/currentAccount\";\n\nconst Signup = ({ name, password, status, signup, history }) => {\n  const [signupFormData, setForm] = useState({\n    name: \"\",\n    password: \"\",\n    status: \"patient\", // NEED TO SET A DEFAULT VALUE OTHERWISE NOTHING WILL BE SENT TO THE BACKEND\n  });\n\n  const handleSignupFormChange = (event, target) => {\n    setForm({\n      ...signupFormData,\n      [target]: event.target.value,\n    });\n  };\n\n  const handleSignupFormSubmit = (event) => {\n    event.preventDefault();\n    console.log(history);\n    signup(signupFormData, history);\n  };\n\n  return (\n    <div className=\"Signup\">\n     <h1 className=\"text-center\">Sign Up</h1>\n        <Form onSubmit={handleSignupFormSubmit} className=\"form-inline\">\n          <div className=\"form-group align-items-center\">\n            <label htmlFor=\"inputname\" className=\"form-label\">\n              Name:{\"\"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"name\"\n              type=\"text\"\n              className=\"form-control-sm\"\n              name=\"name\"\n              value={signupFormData.name}\n              onChange={(event) => handleSignupFormChange(event, \"name\")}\n            />\n          </div>\n          <br></br>\n          <div className=\"form-group  align-items-center\">\n            <label htmlFor=\"inputpassword\" className=\"form-label\">\n              Password:{\"\"}\n            </label>\n            <br></br>\n            <input\n              placeholder=\"password\"\n              type=\"password\"\n              className=\"form-control-sm\"\n              name=\"password\"\n              value={signupFormData.password}\n              onChange={(event) => handleSignupFormChange(event, \"password\")}\n            />\n          </div>\n          <br></br>\n          <div className=\"form-group  align-items-center\">\n            <label>\n              <select\n                value={signupFormData.status}\n                onChange={(event) => handleSignupFormChange(event, \"status\")}\n              >\n                <option value=\"patient\">Patient</option>\n                <option value=\"admin\">Administrator</option>\n              </select>\n            </label>\n          </div>\n          <br></br>\n          <button type=\"submit\" className=\"btn btn-outline-primary\">\n            Sign Up\n          </button>\n        </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  //is this necessary?\n  //what portion of state to provide to props\n  //need props passed in at the top\n  return {\n    signupFormData: state.signupForm,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, { signup })(Signup));\n"]},"metadata":{},"sourceType":"module"}