{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Departments from './components/Departments'; //import { connect } from 'react-redux'\n//import { accountLogin } from \"./actions/accountLogin.js\"\n//import Payments from './components/Payments'\n\nimport AccountContainer from './containers/AccountContainer';\nimport Navbar from './components/Navbar';\nimport Login from './components/registrations/Login';\nimport Logout from './components/registrations/Logout';\nimport Signup from './components/registrations/Signup'; //if constantly passing down props consider connecting to the store\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoginFormChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        loginForm: { ...this.state.loginForm,\n          [name]: value\n        }\n      });\n    };\n\n    this.handleLoginFormSubmit = event => {\n      event.preventDefault(); //state contains most up to date form data. prevent page refresh \n\n      const userInfo = this.state.loginForm;\n      const headers = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user: userInfo\n        })\n      };\n      fetch(\"http://localhost:3001/login\", headers).then(r => r.json()).then(userJSON => {\n        if (userJSON.error) {\n          alert(\"invalid credentials\");\n        } else {\n          this.setState({\n            currentUser: userJSON,\n            loginForm: {\n              name: \"\",\n              password: \"\"\n            }\n          });\n        }\n      }).catch(console.log);\n    };\n\n    this.logout = event => {\n      event.preventDefault();\n      localStorage.removeItem(\"token\");\n      this.setState({\n        currentUser: null,\n        secrets: []\n      });\n    };\n  }\n\n  //constructor() {  //modern react does not need constructor \n  //super() //inheriting from another class. access and call functions from parent.\n  //this.state = {\n  //currentUser: null,\n  //loginForm: {\n  //name: \"\",\n  //password: \"\"\n  //}, \n  //}\n  //}\n  componentDidMount() {\n    //can set state which then causes an update \n    this.props.currentAccount();\n  }\n\n  //getDepartments = () => {\n  //fetch(`http://localhost:3001/api/v1/accounts/1/departments`)\n  //.then(r => r.json())\n  //.then(console.log)\n  //.then(userJSON => { \n  //if (userJSON.error) {\n  //}\n  //})\n  //}\n  //handleErrors = () => {\n  //return (\n  //<div>\n  //<ul>\n  //{this.state.errors.map(error => {\n  //return <li key={error}>{error}</li>\n  //})}\n  //</ul>\n  //</div>\n  //)\n  //};\n  //handleSubmit = (data) => {\n  //this.setState({\n  //account: data.account \n  //})\n  //this.props.history.push(`/accounts/${this.props.account.id}`);\n  //};\n  render() {\n    const {\n      currentUser\n    } = this.state; //let { path, url } = useRouteMatch();\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, currentUser ? `Logged in as ${currentUser.name}` : \"Not logged in\"), /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/React.createElement(Login, {\n        handleLoginFormChange: this.handleLoginFormChange,\n        handleLoginFormSubmit: this.handleLoginFormSubmit,\n        name: this.state.loginForm.name,\n        password: this.state.loginForm.password,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 48\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signup\",\n      render: () => /*#__PURE__*/React.createElement(Signup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 54\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/account\",\n      render: routerProps => /*#__PURE__*/React.createElement(AccountContainer, Object.assign({}, routerProps, {\n        accounts: this.state.currentUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 63\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }))), currentUser ? /*#__PURE__*/React.createElement(Logout, {\n      logout: this.logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getDepartments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, \"Departments\"), currentUser ? /*#__PURE__*/React.createElement(Departments, {\n      departments: currentUser.departments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 26\n      }\n    }) : null);\n  }\n\n} //receives entire state as it's argument \n\n\nconst mapStateToProps = state => {\n  //what portion of state to provide to props \n  return {\n    //executed with each change to the store. \n    loginForm: state.loginForm\n  };\n};\n\nexport default App; // specifies component to provide data to.","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/App.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Departments","AccountContainer","Navbar","Login","Logout","Signup","App","handleLoginFormChange","event","name","value","target","setState","loginForm","state","handleLoginFormSubmit","preventDefault","userInfo","headers","method","body","JSON","stringify","user","fetch","then","r","json","userJSON","error","alert","currentUser","password","catch","console","log","logout","localStorage","removeItem","secrets","componentDidMount","props","currentAccount","render","routerProps","getDepartments","departments","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Departments from './components/Departments'\n//import { connect } from 'react-redux'\n//import { accountLogin } from \"./actions/accountLogin.js\"\n//import Payments from './components/Payments'\nimport AccountContainer from './containers/AccountContainer'\nimport Navbar from './components/Navbar'\nimport Login from './components/registrations/Login'\nimport Logout from './components/registrations/Logout'\nimport Signup from './components/registrations/Signup'\n\n//if constantly passing down props consider connecting to the store\n\nclass App extends Component {\n  //constructor() {  //modern react does not need constructor \n    //super() //inheriting from another class. access and call functions from parent.\n    //this.state = {\n      //currentUser: null,\n      //loginForm: {\n        //name: \"\",\n        //password: \"\"\n     //}, \n    //}\n  //}\n\n  componentDidMount() { //can set state which then causes an update \n    this.props.currentAccount();\n  }\n\n\n  handleLoginFormChange = event => {\n   const {name, value } = event.target\n    this.setState({\n      loginForm: {\n        ...this.state.loginForm,\n        [name]: value\n      }\n    })\n  };\n\n  handleLoginFormSubmit = event => {\n    event.preventDefault() //state contains most up to date form data. prevent page refresh \n    const userInfo = this.state.loginForm\n    const headers = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: userInfo\n      })\n    }\n    fetch(\"http://localhost:3001/login\", headers)\n    .then(r => r.json())\n    .then(userJSON => { \n      if (userJSON.error) {\n        alert(\"invalid credentials\") \n      } else {\n        this.setState({\n          currentUser: userJSON,\n          loginForm: {\n            name: \"\",\n            password: \"\"\n          }\n        })\n      }\n      })\n    .catch(console.log)\n  }\n\n  logout = event => {\n    event.preventDefault()\n    localStorage.removeItem(\"token\")\n    this.setState({\n      currentUser: null,\n      secrets: []\n    })\n  }\n\n//getDepartments = () => {\n    //fetch(`http://localhost:3001/api/v1/accounts/1/departments`)\n    //.then(r => r.json())\n    //.then(console.log)\n    //.then(userJSON => { \n      //if (userJSON.error) {\n      //}\n    //})\n//}\n\n  //handleErrors = () => {\n    //return (\n      //<div>\n        //<ul>\n        //{this.state.errors.map(error => {\n        //return <li key={error}>{error}</li>\n          //})}\n        //</ul>\n      //</div>\n    //)\n  //};\n\n//handleSubmit = (data) => {\n  //this.setState({\n    //account: data.account \n  //})\n  //this.props.history.push(`/accounts/${this.props.account.id}`);\n//};\n\n\n  render() {\n    const { currentUser } = this.state\n    //let { path, url } = useRouteMatch();\n\n    return (\n      <div className=\"App\">\n        <h2>{ currentUser ?\n        `Logged in as ${currentUser.name}`  :\n        \"Not logged in\" }\n         </h2> \n       <Router>\n        <Navbar/>\n        <Switch> \n          <Route exact path='/' render={() => (<Login \n            handleLoginFormChange={this.handleLoginFormChange}\n            handleLoginFormSubmit={this.handleLoginFormSubmit}\n            name={this.state.loginForm.name}\n            password={this.state.loginForm.password}\n            />)}/>\n          <Route exact path='/signup' render={() => (<Signup/>)}/>\n          <Route exact path='/account' render={routerProps => <AccountContainer {...routerProps} accounts={this.state.currentUser}/>} />\n        </Switch>\n       </Router>\n         { currentUser ? \n          <Logout logout={this.logout}/> : null }\n          <button onClick={this.getDepartments}>Departments</button>\n         { currentUser ? <Departments departments={currentUser.departments} /> : null }\n    </div>\n    );\n  }\n}\n//receives entire state as it's argument \nconst mapStateToProps = state => { //what portion of state to provide to props \n  return { //executed with each change to the store. \n    loginForm: state.loginForm\n  }\n}\n\nexport default App; // specifies component to provide data to. "]},"metadata":{},"sourceType":"module"}