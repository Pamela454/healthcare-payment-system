{"ast":null,"code":"var _jsxFileName = \"/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { currentPayments } from \"../actions/currentPayments\";\nimport CheckoutWithStripe from \"./CheckoutWithStripe.js\";\nimport { ElementsConsumer, CardElement } from \"@stripe/react-stripe-js\"; //form data available in local state or store? \n//class component, local state holding \n\nconst PaymentNew = () => {\n  _s();\n\n  const [form, setForm] = useState({\n    amount: ''\n  });\n\n  const handlePaymentFormChange = (event, target) => {\n    setForm({ ...form,\n      [target]: event.target.value\n    });\n  };\n\n  const handlePaymentFormSubmit = event => {\n    event.preventDefault();\n    /*const { stripe, elements } = this.props;\n    if (!stripe || !elements) {\n    return;\n    }\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n    if (result.error) {\n    console.log(result.error.message);\n    } else {\n    console.log(result.token);\n    // pass the token to your backend API\n    } */\n    //add call to action \n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewPayment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"New Payment\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handlePaymentFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"amount\",\n    type: \"text\",\n    name: \"amount\",\n    autoComplete: \"on\",\n    value: form.amount,\n    onChange: event => handlePaymentFormChange(event, \"amount\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CheckoutWithStripe, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    placeholder: \"submit\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Make Payment\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }));\n};\n/*function InjectedCheckoutForm() {\n  return (\n    <ElementsConsumer>\n      {({ stripe, elements }) => (\n        <CheckoutForm stripe={stripe} elements={elements} />\n      )}\n    </ElementsConsumer>\n  );\n}*/\n\n\n_s(PaymentNew, \"NDCha37EwvsooFzp/HBg05HhVQY=\");\n\n_c = PaymentNew;\n\nconst mapStateToProps = state => {\n  return {\n    form: state.form\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  currentPayments\n})(PaymentNew));\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentNew\");","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/components/PaymentNew.js"],"names":["React","useState","withRouter","connect","currentPayments","CheckoutWithStripe","ElementsConsumer","CardElement","PaymentNew","form","setForm","amount","handlePaymentFormChange","event","target","value","handlePaymentFormSubmit","preventDefault","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,yBAA9C,C,CAEA;AACA;;AACA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAEvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAC/BU,IAAAA,MAAM,EAAE;AADuB,GAAD,CAAhC;;AAID,QAAMC,uBAAuB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/CJ,IAAAA,OAAO,CAAC,EACP,GAAGD,IADI;AAER,OAACK,MAAD,GAAUD,KAAK,CAACC,MAAN,CAAaC;AAFf,KAAD,CAAP;AAIF,GALF;;AAQA,QAAMC,uBAAuB,GAAIH,KAAD,IAAW;AACrCA,IAAAA,KAAK,CAACI,cAAN;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO;AACL,GAhBD;;AAkBA,sBACC;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADN,eAEM;AAAM,IAAA,QAAQ,EAAED,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,WAAW,EAAC,QADd;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,YAAY,EAAC,IAJf;AAKE,IAAA,KAAK,EAAEP,IAAI,CAACE,MALd;AAME,IAAA,QAAQ,EAAGE,KAAD,IAAUD,uBAAuB,CAACC,KAAD,EAAQ,QAAR,CAN7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,eASE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAUA;AAAQ,IAAA,WAAW,EAAC,QAApB;AAA6B,IAAA,IAAI,EAAC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVA,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CAFN,eAoBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBR,CADD;AAyBA,CAzDD;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAnEML,U;;KAAAA,U;;AAqEN,MAAMU,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLV,IAAAA,IAAI,EAAEU,KAAK,CAACV;AADP,GAAP;AAGD,CAJD;;AAMA,eAAeP,UAAU,CAACC,OAAO,CAACe,eAAD,EAAkB;AAAEd,EAAAA;AAAF,CAAlB,CAAP,CAA+CI,UAA/C,CAAD,CAAzB","sourcesContent":["import React from 'react'\nimport { useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { currentPayments } from \"../actions/currentPayments\";\nimport CheckoutWithStripe from \"./CheckoutWithStripe.js\";\nimport { ElementsConsumer, CardElement } from \"@stripe/react-stripe-js\";\n\n//form data available in local state or store? \n//class component, local state holding \nconst PaymentNew = () => {\n\n  const [form, setForm] = useState({\n    amount: ''\n  });\n\n\tconst handlePaymentFormChange = (event, target) => {\n     setForm({\n      ...form,\n     [target]: event.target.value, \n    });\n  }\n\n\n\tconst handlePaymentFormSubmit = (event) => {\n       event.preventDefault()\n       /*const { stripe, elements } = this.props;\n  \t\tif (!stripe || !elements) {\n    \treturn;\n  \t\t}\n\n  \t\tconst card = elements.getElement(CardElement);\n  \t\tconst result = await stripe.createToken(card);\n  \t\t\tif (result.error) {\n    \tconsole.log(result.error.message);\n  \t\t\t} else {\n    \tconsole.log(result.token);\n    // pass the token to your backend API\n  \t\t\t} */\n       //add call to action \n\t}\n\n\treturn (\n\t\t<div className=\"NewPayment\">\n        <h1>New Payment</h1>\n        <form onSubmit={handlePaymentFormSubmit}>\n          <input\n            placeholder=\"amount\"\n            type=\"text\"\n            name=\"amount\"\n            autoComplete=\"on\"\n            value={form.amount}\n            onChange={(event)=> handlePaymentFormChange(event, \"amount\")}\n          /><br/>\n          <CheckoutWithStripe />\n        <button placeholder=\"submit\" type=\"submit\">\n            Make Payment\n          </button> \n          <br></br>     \n          <br></br>             \n          <div>\n          </div>\n          </form>\n          <div>\n        </div>\n      </div>\n\t)\n}\n\n/*function InjectedCheckoutForm() {\n  return (\n    <ElementsConsumer>\n      {({ stripe, elements }) => (\n        <CheckoutForm stripe={stripe} elements={elements} />\n      )}\n    </ElementsConsumer>\n  );\n}*/\n\nconst mapStateToProps = state => {\n  return {\n    form: state.form \n  };\n};\n\nexport default withRouter(connect(mapStateToProps, { currentPayments } )(PaymentNew));\n"]},"metadata":{},"sourceType":"module"}