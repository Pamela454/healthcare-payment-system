{"ast":null,"code":"export default function accountReducer(state = {\n  accounts: []\n}, action) {\n  switch (action.type) {\n    case 'FETCH_ACCOUNTS':\n      return {\n        accounts: action.payload\n      };\n\n    case 'ADD_ACCOUNT':\n      return { ...state,\n        account: [...state.account, action.payload]\n      };\n    //only override specific property \n\n    case 'ADD_DEPARTMENT':\n      //at least returns some version of state\n      let accounts = state.accounts.map(account => {\n        if (account.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return account;\n        }\n      });\n      return { ...state,\n        accounts: accounts\n      };\n\n    case 'DELETE_TRANSACTION':\n      //at least returns some version of state\n      debugger;\n      let accountsNext = state.accounts.map(account => {\n        if (account.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return account;\n        }\n      });\n      return { ...state,\n        accounts: accountsNext\n      };\n\n    default:\n      return state;\n  }\n} //reducer is a function \n//state as object vs array\n//updates the state based on the action","map":{"version":3,"sources":["/Users/pamela/healthcare-payment-system/frontend/src/reducers/accountReducer.js"],"names":["accountReducer","state","accounts","action","type","payload","account","map","id","accountsNext"],"mappings":"AAAA,eAAe,SAASA,cAAT,CAAwBC,KAAK,GAAG;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAhC,EAAgDC,MAAhD,EAAwD;AACtE,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,gBAAL;AACQ,aAAO;AAACF,QAAAA,QAAQ,EAAEC,MAAM,CAACE;AAAlB,OAAP;;AACD,SAAK,aAAL;AACC,aAAO,EAAC,GAAGJ,KAAJ;AAAWK,QAAAA,OAAO,EAAE,CAAC,GAAGL,KAAK,CAACK,OAAV,EAAmBH,MAAM,CAACE,OAA1B;AAApB,OAAP;AAA+D;;AAChE,SAAK,gBAAL;AAAuB;AACtB,UAAIH,QAAQ,GAAGD,KAAK,CAACC,QAAN,CAAeK,GAAf,CAAmBD,OAAO,IAAI;AAC5C,YAAIA,OAAO,CAACE,EAAR,KAAeL,MAAM,CAACE,OAAP,CAAeG,EAAlC,EAAsC;AACpC,iBAAOL,MAAM,CAACE,OAAd;AACD,SAFD,MAEO;AACL,iBAAOC,OAAP;AACD;AACD,OANc,CAAf;AAOA,aAAO,EAAC,GAAGL,KAAJ;AAAWC,QAAAA,QAAQ,EAAEA;AAArB,OAAP;;AACF,SAAK,oBAAL;AAA2B;AACzB;AACA,UAAIO,YAAY,GAAGR,KAAK,CAACC,QAAN,CAAeK,GAAf,CAAmBD,OAAO,IAAI;AAC/C,YAAIA,OAAO,CAACE,EAAR,KAAeL,MAAM,CAACE,OAAP,CAAeG,EAAlC,EAAsC;AACpC,iBAAOL,MAAM,CAACE,OAAd;AACD,SAFD,MAEO;AACL,iBAAOC,OAAP;AACD;AACF,OANkB,CAAnB;AAOA,aAAO,EAAC,GAAGL,KAAJ;AAAWC,QAAAA,QAAQ,EAAEO;AAArB,OAAP;;AACD;AACC,aAAOR,KAAP;AAzBT;AA2BA,C,CAED;AACA;AACA","sourcesContent":["export default function accountReducer(state = {accounts: []}, action) {  \n\tswitch (action.type) {\n\t\tcase 'FETCH_ACCOUNTS':\n          return {accounts: action.payload}\n         case 'ADD_ACCOUNT':\n          return {...state, account: [...state.account, action.payload]} //only override specific property \n         case 'ADD_DEPARTMENT': //at least returns some version of state\n          let accounts = state.accounts.map(account => {\n          \tif (account.id === action.payload.id) {\n          \t  return action.payload \n          \t} else {\n          \t  return account \n          \t}\n          })\n          return {...state, accounts: accounts}\n        case 'DELETE_TRANSACTION': //at least returns some version of state\n          debugger; \n          let accountsNext = state.accounts.map(account => {\n            if (account.id === action.payload.id) {\n              return action.payload \n            } else {\n              return account \n            }\n          })\n          return {...state, accounts: accountsNext}\n         default:\n          return state\n    }       \n}\n\n//reducer is a function \n//state as object vs array\n//updates the state based on the action \n"]},"metadata":{},"sourceType":"module"}